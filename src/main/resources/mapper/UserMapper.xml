<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nowcoder.community.dao.UserMapper">
    <sql id="insertFields">
        username,password,salt,email,`type`,status,activation_code,header_url,create_time
    </sql>
    <sql id="selectFields">
        id,username,password,salt,email,`type`,status,activation_code,header_url,create_time
    </sql>
    <!--User selectById(int id); mapper接口中的方法名与id名一致，以匹配对应的sql语句-->
    <!--resultType表明返回的类型-->
    <select id="selectById" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where id = #{id}  <!--这里的逻辑是预编译sql语句  获取参数值的两种方式：#{}、${}需要加单引号-->
    </select>
    <!--User selectByName(String username);-->
    <select id="selectByName" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where username = #{username}
    </select>
    <!--User selectByEmail(String email);-->
    <select id="selectByEmail" resultType="User">
        select <include refid="selectFields"></include>
        from user
        where email = #{email}
    </select>

    <!--int insertUser(User user);-->
    <!--insert的第一种实现： INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)-->
    <!--parameterType="" 复杂的参数类型   keyProperty="id" 设置id对应的属性 mysql自动生成id，mybatis得到mysql自增的id填入User-->
    <insert id="insertUser" parameterType="User" keyProperty="id">
        insert into user (<include refid="insertFields"></include>)
        values(#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>
    <!-- insert的第二种实现，NSERT INTO 表名称 VALUES (值1, 值2,....)
        注意一定要有id，否则报错；要自增则设置为null
    <insert id="insertUser">
       insert into user values(null,#{username},#{password},#{salt},#{email},#{type},#{status},#{activationCode},#{headerUrl},#{createTime})
    </insert>
    -->

    <!-- int updateStatus(int id,int status);-->
    <update id="updateStatus">
        update user set status = #{status} where id = #{id}
    </update>

    <!-- int updateHeader(int id,String headerUrl);-->
    <update id="updateHeader">
        update user set header_url = #{headerUrl} where id = #{id}
    </update>

    <!--int updatePassword(int id,String password);-->
    <update id="updatePassword">
        update user set password = #{password} where id = #{id}
    </update>

</mapper>